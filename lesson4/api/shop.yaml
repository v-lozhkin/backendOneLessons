openapi: 3.0.3
info:
  title: ShopAPI
  description: My online shop REST API
  version: 1.0.0
servers:
  - url: 'http://localhost:8000/'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer # чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 # в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
tags:
  - name: User
    description: "Operations with user"
  - name: Item
    description: "Operations with items"
paths:
  /user/login:
    post:
      tags:
        - User
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: { }
  /user/logout:
    post:
      tags:
        - User
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: { }
  /items/:
    post:
      tags:
        - Item
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        description: "Item object that needs to be added to the store"
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
        required: true
      responses:
        "405":
          description: "Invalid input"
      security:
        - bearerAuth: [ ]
    get:
      tags:
        - Item
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: { }
  /items/{itemId}/upload:
    post:
      tags:
        - Item
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        description: ""
        content:
          'image/jpeg':
            schema:
              type: string
              format: binary
          'image/png':
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: ""
          content:
            'text/plain':
              schema:
                type: string
      security:
        - bearerAuth: [ ]
  /items/{itemId}:
    get:
      tags:
        - Item
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: { }
    put:
      tags:
        - Item
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: "Item object that needs to be added to the store"
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/Item"
        required: true
      responses:
        405:
          description: Invalid input
          content: { }
      security:
        - bearerAuth: [ ]
    delete:
      tags:
        - Item
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - bearerAuth: [ ]


